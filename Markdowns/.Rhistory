design = matrix(0.5, ncol = length(data$dfs), nrow = length(data$dfs),
dimnames = list(names(data$dfs), names(data$dfs)))
diag(design) = 0 # set diagonal to 0s
basicDiabloModel <- block.plsda(list(Lipids = data$dfs$lipids,
Proteins = data$dfs$proteins),
data$samples$group,
design=design,
scale=T)
plotIndiv(basicDiabloModel,
ind.names= data$samples$names,
#rep.space = "X-variate",
group = data$samples$group,
legend = TRUE,
legend.title = 'Group',
title = "Basic multi-block PLSDA",
col = Group.Palette)
design = matrix(1, ncol = length(data$dfs), nrow = length(data$dfs),
dimnames = list(names(data$dfs), names(data$dfs)))
diag(design) = 0 # set diagonal to 0s
basicDiabloModel <- block.plsda(list(Lipids = data$dfs$lipids,
Proteins = data$dfs$proteins),
data$samples$group,
design=design,
scale=T)
plotIndiv(basicDiabloModel,
ind.names= data$samples$names,
#rep.space = "X-variate",
group = data$samples$group,
legend = TRUE,
legend.title = 'Group',
title = "Basic multi-block PLSDA",
col = Group.Palette)
design = matrix(0.1, ncol = length(data$dfs), nrow = length(data$dfs),
dimnames = list(names(data$dfs), names(data$dfs)))
diag(design) = 0 # set diagonal to 0s
basicDiabloModel <- block.plsda(list(Lipids = data$dfs$lipids,
Proteins = data$dfs$proteins),
data$samples$group,
design=design,
scale=T)
plotIndiv(basicDiabloModel,
ind.names= data$samples$names,
#rep.space = "X-variate",
group = data$samples$group,
legend = TRUE,
legend.title = 'Group',
title = "Basic multi-block PLSDA",
col = Group.Palette)
design = matrix(0.05, ncol = length(data$dfs), nrow = length(data$dfs),
dimnames = list(names(data$dfs), names(data$dfs)))
diag(design) = 0 # set diagonal to 0s
basicDiabloModel <- block.plsda(list(Lipids = data$dfs$lipids,
Proteins = data$dfs$proteins),
data$samples$group,
design=design,
scale=T)
plotIndiv(basicDiabloModel,
ind.names= data$samples$names,
#rep.space = "X-variate",
group = data$samples$group,
legend = TRUE,
legend.title = 'Group',
title = "Basic multi-block PLSDA",
col = Group.Palette)
design = matrix(0.1, ncol = length(data$dfs), nrow = length(data$dfs),
dimnames = list(names(data$dfs), names(data$dfs)))
diag(design) = 0 # set diagonal to 0s
basicDiabloModel <- block.plsda(list(Lipids = data$dfs$lipids,
Proteins = data$dfs$proteins),
data$samples$group,
design=design,
scale=T)
plotIndiv(basicDiabloModel,
ind.names= data$samples$names,
#rep.space = "X-variate",
group = data$samples$group,
legend = TRUE,
legend.title = 'Group',
title = "Basic multi-block PLSDA",
col = Group.Palette)
plotVar(basicDiabloModel)
plotVar(basicDiabloModel)
lapply(data$dfs, dim)
source(paste0(getwd(), "/../Config/global_options.R"))
suppressMessages(source(paste0(getwd(), "/../Scripts/Functions.R")))
data <- readRDS(paste0(wd, "RDS/filtered_data.rds"))
design = matrix(0.1, ncol = length(data$dfs), nrow = length(data$dfs),
dimnames = list(names(data$dfs), names(data$dfs)))
diag(design) = 0 # set diagonal to 0s
basicDiabloModel <- block.plsda(list(Lipids = data$dfs$lipids,
Proteins = data$dfs$proteins),
data$samples$group,
design=design,
scale=T)
plotIndiv(basicDiabloModel,
ind.names= data$samples$names,
#rep.space = "X-variate",
group = data$samples$group,
legend = TRUE,
legend.title = 'Group',
title = "Basic multi-block PLSDA",
col = Group.Palette)
plotIndiv(basicDiabloModel,
ind.names= data$samples$names,
#rep.space = "X-variate",
group = data$samples$group,
legend = TRUE,
legend.title = 'Group',
title = "Basic multi-block PLSDA",
col = Group.Palette,
ellipse = T)
plotVar(basicDiabloModel)
plotVar(basicDiabloModel,
cutoff=0.5)
plotVar(basicDiabloModel,
cutoff = 0.5,
var.names = FALSE,
legend = T,
col = Block.Palette)
plotVar(basicDiabloModel,
cutoff = 0.0,
var.names = FALSE,
legend = T,
col = Block.Palette)
basicDiabloModelPerf = perf(basicDiabloModel, validation = 'Mfold',
folds = 10, nrepeat = 10)
plot(basicDiabloModelPerf)
?perf
basicDiabloModel <- block.plsda(list(Lipids = data$dfs$lipids,
Proteins = data$dfs$proteins),
data$samples$group,
design=design,
scale=T,
ncomp=10)
plotIndiv(basicDiabloModel,
ind.names= data$samples$names,
#rep.space = "X-variate",
group = data$samples$group,
legend = TRUE,
legend.title = 'Group',
title = "Basic multi-block PLSDA",
col = Group.Palette,
ellipse = T)
basicDiabloModel$design
basicDiabloModel <- block.plsda(list(Lipids = data$dfs$lipids,
Proteins = data$dfs$proteins),
data$samples$group,
design=design,
scale=T,
ncomp=10)
plotIndiv(basicDiabloModel,
ind.names= data$samples$names,
#rep.space = "X-variate",
group = data$samples$group,
legend = TRUE,
legend.title = 'Group',
title = "Basic multi-block PLSDA",
col = Group.Palette,
ellipse = T)
plotVar(basicDiabloModel,
cutoff = 0.0,
var.names = FALSE,
legend = T,
col = Block.Palette)
plotVar(basicDiabloModel,
cutoff = 0.5,
var.names = FALSE,
legend = T,
col = Block.Palette)
basicDiabloModelPerf <- perf(basicDiabloModel, validation = 'Mfold',
folds = 10, nrepeat = 10)
plot(basicDiabloModelPerf)
class(basicDiabloModel)
basicDiabloModelPerf <- perf(basicDiabloModel, validation = 'loo',
folds = 10, nrepeat = 10)
basicDiabloModelPerf <- perf(basicDiabloModel, validation = 'loo')
plot(basicDiabloModelPerf)
0.38*70
27/70
basicDiabloModelPerf$choice.ncomp
basicDiabloModelPerf <- perf(basicDiabloModel, validation = 'Mfold',
folds = 10, nrepeat = 10)
basicDiabloModelPerf$choice.ncomp
plot(basicDiabloModelPerf)
list(names(data$dfs)
)
test.keepX = list (lipids = seq(5, ncol(data$dfs$lipids)),
proteins = seq(5, ncol(data$dfs$proteins)))
rm(test.keepX)
basicDiabloModelTune = tune.block.splsda(X = data$dfs,
Y = data$samples$group,
ncomp = ncomp,
test.keepX = testKeepX,
design = design,
validation = 'Mfold',
folds = 10, nrepeat = 1,
dist = "centroids.dist")plot(basicDiabloModelPerf)
plot(basicDiabloModelPerf)
testKeepX = list (lipids = seq(5, ncol(data$dfs$lipids)),
proteins = seq(5, ncol(data$dfs$proteins)))
basicDiabloModelTune = tune.block.splsda(X = data$dfs,
Y = data$samples$group,
ncomp = ncomp,
test.keepX = testKeepX,
design = design,
validation = 'Mfold',
folds = 10, nrepeat = 1,
dist = "mahalanobis.dist")
ncomp <- 2
testKeepX = list (lipids = seq(5, ncol(data$dfs$lipids)),
proteins = seq(5, ncol(data$dfs$proteins)))
basicDiabloModelTune = tune.block.splsda(X = data$dfs,
Y = data$samples$group,
ncomp = ncomp,
test.keepX = testKeepX,
design = design,
validation = 'Mfold',
folds = 10, nrepeat = 1,
dist = "mahalanobis.dist")
library(BiocParallel)
detectCores()
BiocParallel::registered()
BiocParallel::registered()$n
snowWorkers()
bpparam <- SnowParam(snowWorkers()-2)
bpparam
basicDiabloModelTune = tune.block.splsda(X = data$dfs,
Y = data$samples$group,
ncomp = ncomp,
test.keepX = testKeepX,
design = design,
validation = 'Mfold',
folds = 10, nrepeat = 1,
dist = "mahalanobis.dist",
BPPARAM = bpparam)
testKeepX = list (lipids = seq(5, ncol(data$dfs$lipids), 5),
proteins = seq(5, ncol(data$dfs$proteins), 5))
basicDiabloModelTune = tune.block.splsda(X = data$dfs,
Y = data$samples$group,
ncomp = ncomp,
test.keepX = testKeepX,
design = design,
validation = 'Mfold',
folds = 10, nrepeat = 1,
dist = "mahalanobis.dist",
BPPARAM = bpparam)
basicDiabloModelTune
basicDiabloModelTune$choice.keepX
plot(basicDiabloModelTune)
basicDiabloModelTune$error.rate.all
basicDiabloModelTune$error.rate.all$comp1
basicDiabloModelTune$error.rate.all$comp1 %>% hist()
basicDiabloModelTune$call
basicDiabloModelTune$measure
basicDiabloModelTune$error.rate.class
basicDiabloModelTune$error.rate
dim(basicDiabloModelTune$error.rate)
strsplit(rownames(basicDiabloModelTune$error.rate), "_")
strsplit(rownames(basicDiabloModelTune$error.rate), "_") %>%
lapply(function(x){x[1]})
proteinTestX <- strsplit(rownames(basicDiabloModelTune$error.rate), "_") %>%
lapply(function(x){x[2]}) %>% unlist()
lipidTestX <- strsplit(rownames(basicDiabloModelTune$error.rate), "_") %>%
lapply(function(x){x[1]}) %>% unlist()
lipidTestX
df <- basicDiabloModelTune$error.rate
lipidTestX <- strsplit(rownames(df), "_") %>%
lapply(function(x){x[1]}) %>% unlist()
proteinTestX <- strsplit(rownames(df), "_") %>%
lapply(function(x){x[2]}) %>% unlist()
lipidTestX
lipidTestX <- strsplit(rownames(df), "_") %>%
lapply(function(x){x[1]}) %>% unlist() %>% as.numeric()
proteinTestX <- strsplit(rownames(df), "_") %>%
lapply(function(x){x[2]}) %>% unlist() %>% as.numeric()
proteinTestX
df <- cbind(lipidTestX = lipidTestX,
proteinTestX = proteinTestX,
df)
df
gather(df)
df <- basicDiabloModelTune$error.rate
lipidTestX <- strsplit(rownames(df), "_") %>%
lapply(function(x){x[1]}) %>% unlist() %>% as.numeric()
proteinTestX <- strsplit(rownames(df), "_") %>%
lapply(function(x){x[2]}) %>% unlist() %>% as.numeric()
df <- cbind(lipidTestX = lipidTestX,
proteinTestX = proteinTestX,
df) %>% as.data.table()
gather(df)
df <- basicDiabloModelTune$error.rate
lipidTestX <- strsplit(rownames(df), "_") %>%
lapply(function(x){x[1]}) %>% unlist() %>% as.numeric()
proteinTestX <- strsplit(rownames(df), "_") %>%
lapply(function(x){x[2]}) %>% unlist() %>% as.numeric()
df <- cbind(lipidTestX = lipidTestX,
proteinTestX = proteinTestX,
df$comp1) %>% as.data.table()
df <- basicDiabloModelTune$error.rate
lipidTestX <- strsplit(rownames(df), "_") %>%
lapply(function(x){x[1]}) %>% unlist() %>% as.numeric()
proteinTestX <- strsplit(rownames(df), "_") %>%
lapply(function(x){x[2]}) %>% unlist() %>% as.numeric()
df
df$comp1
df[,1]
df <- cbind(lipidTestX = lipidTestX,
proteinTestX = proteinTestX,
df[,1]) %>% as.data.table()
df
gather(df)
df %>% ggplot(aes(x = lipidTestX,
y = proteinTestX,
fill = V3)) +
geom_tile()
df <- cbind(lipidTestX = lipidTestX,
proteinTestX = proteinTestX,
errRate = df[,1]) %>% as.data.table()
df <- basicDiabloModelTune$error.rate
lipidTestX <- strsplit(rownames(df), "_") %>%
lapply(function(x){x[1]}) %>% unlist() %>% as.numeric()
proteinTestX <- strsplit(rownames(df), "_") %>%
lapply(function(x){x[2]}) %>% unlist() %>% as.numeric()
df <- cbind(lipidTestX = lipidTestX,
proteinTestX = proteinTestX,
errRate = df[,1]) %>% as.data.table()
df %>% ggplot(aes(x = lipidTestX,
y = proteinTestX,
fill = V3)) +
geom_tile()
df %>% ggplot(aes(x = lipidTestX,
y = proteinTestX,
fill = errRate)) +
geom_tile()
df %>% ggplot(aes(x = lipidTestX,
y = proteinTestX,
fill = errRate)) +
geom_tile() +
theme_bw()
df %>% ggplot(aes(x = lipidTestX,
y = proteinTestX,
fill = errRate,
colour = "black")) +
geom_tile() +
theme_bw()
df %>% ggplot(aes(x = lipidTestX,
y = proteinTestX,
fill = errRate) +
geom_tile(colour = "black")) +
theme_bw()
df %>% ggplot(aes(x = lipidTestX,
y = proteinTestX,
fill = errRate)) +
geom_tile(colour = "black") +
theme_bw()
class(basicDiabloModelTune)
### ======================================================================== ###
#
Diablo_Tuning_Heatmap <- function(diabloTuneObj,
comp=1) {
df <- diabloTuneObj$error.rate[,comp,drop=F]
lipidTestX <- strsplit(rownames(df), "_") %>%
lapply(function(x){x[1]}) %>% unlist() %>% as.numeric()
proteinTestX <- strsplit(rownames(df), "_") %>%
lapply(function(x){x[2]}) %>% unlist() %>% as.numeric()
df <- cbind(lipidTestX = lipidTestX,
proteinTestX = proteinTestX,
errRate = df) %>% as.data.table()
df %>% ggplot(aes(x = lipidTestX,
y = proteinTestX,
fill = errRate)) +
geom_tile(colour = "black") +
theme_bw() +
xlab("# lipid features") +
ylab("# protein features") +
ggtitle(paste0("Featuring tuning, comp", comp))
}
source("~/Documents/Cincinnati work/MB Diabetes Analysis/Scripts/Functions.R")
Diablo_Tuning_Heatmap(basicDiabloModelTune)
source("~/Documents/Cincinnati work/MB Diabetes Analysis/Scripts/Functions.R")
Diablo_Tuning_Heatmap(basicDiabloModelTune)
source("~/Documents/Cincinnati work/MB Diabetes Analysis/Scripts/Functions.R")
Diablo_Tuning_Heatmap(basicDiabloModelTune)
source("~/Documents/Cincinnati work/MB Diabetes Analysis/Scripts/Functions.R")
Diablo_Tuning_Heatmap(basicDiabloModelTune)
source("~/Documents/Cincinnati work/MB Diabetes Analysis/Scripts/Functions.R")
Diablo_Tuning_Heatmap(basicDiabloModelTune)
source("~/Documents/Cincinnati work/MB Diabetes Analysis/Scripts/Functions.R")
Diablo_Tuning_Heatmap(basicDiabloModelTune)
source("~/Documents/Cincinnati work/MB Diabetes Analysis/Scripts/Functions.R")
Diablo_Tuning_Heatmap(basicDiabloModelTune)
source("~/Documents/Cincinnati work/MB Diabetes Analysis/Scripts/Functions.R")
Diablo_Tuning_Heatmap(basicDiabloModelTune)
df
df$errRate == max(df$errRate)
df[df$errRate == max(df$errRate),]
df[df$errRate == min(df$errRate),]
diabloTuneObj <- basicDiabloModelTune
comp=1
df <- diabloTuneObj$error.rate[,comp]
lipidTestX <- strsplit(names(df), "_") %>%
lapply(function(x){x[1]}) %>% unlist() %>% as.numeric()
proteinTestX <- strsplit(names(df), "_") %>%
lapply(function(x){x[2]}) %>% unlist() %>% as.numeric()
df <- cbind(lipidTestX = lipidTestX,
proteinTestX = proteinTestX,
BER = df,
opt = FALSE) %>% as.data.table()
df
rm(diabloTuneObj)
Diablo_Tuning_Heatmap(basicDiabloModelTune,
comp = 2)
basicDiabloModelTune$choice.keepX
keepX <- basicDiabloModelTune$choice.keepX
model <- block.splsda(X = data$dfs,
Y = data$samples$group,
ncomp = ncomp,
keepX = keepX,
design = design)
plotIndiv(basicDiabloModel,
ind.names= data$samples$names,
#rep.space = "X-variate",
group = data$samples$group,
legend = TRUE,
legend.title = 'Group',
title = "Refined multi-block PLSDA",
col = Group.Palette,
ellipse = T)
plotIndiv(model,
ind.names= data$samples$names,
#rep.space = "X-variate",
group = data$samples$group,
legend = TRUE,
legend.title = 'Group',
title = "Refined multi-block PLSDA",
col = Group.Palette,
ellipse = T)
plotArrow(model)
plotArrow(model)
plotVar(model)
model$X
model$X %>% lapply(dim)
plotVar(model,
cutoff = 0.5,
var.names = FALSE,
legend = T,
col = Block.Palette)
plotVar(model,
cutoff = 0.5,
var.names = FALSE,
legend = T,,
pch = c(16, 17),
col = Block.Palette)
circosPlot(model,
cutoff = 0.5,
var.names = FALSE,
legend = T,
pch = c(16, 17),
col = Block.Palette)
circosPlot(model,
cutoff = 0.5,
var.names = FALSE,
legend = T,
color.blocks = Block.Palette)
circosPlot(model,
cutoff = 0.5,
legend = T,
color.blocks = Block.Palette)
circosPlot(model,
cutoff = 0.1,
legend = T,
color.blocks = Block.Palette)
circosPlot(model,
cutoff = 0.75,
legend = T,
color.blocks = Block.Palette)
circosPlot(model,
cutoff = 0.5,
legend = T,
color.blocks = Block.Palette)
cimDiablo(model)
network(model)
network(model, cutoff=0.5)
network(model, cutoff=0.5)
network(model, cutoff=0.5)
network(model, cutoff=0.5)
network(model, cutoff=0.5,
color.node = Block.Palette)
?network
network(model, cutoff=0.5,
color.node = Block.Palette,
block.var.names = F)
network(model, cutoff=0.5,
color.node = Block.Palette,
block.var.names = F,
legend = T)
plotLoadings(model,
comp = 1,
contrib = 'max',
method = 'median')
?plotLoadings
plotLoadings(model,
comp = 1,
contrib = 'max',
method = 'median',
ndisplay = 15)
plotLoadings(model,
comp = 1,
contrib = 'max',
method = 'median',
ndisplay = 20,
col = Block.Palette)
